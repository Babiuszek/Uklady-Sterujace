
Zadanie_Taski.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000668  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000668  000006fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  00800060  00800060  000006fc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000e50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000571  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b0  00000000  00000000  00001461  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c4  00000000  00000000  00001611  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  000019d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000156  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002bc  00000000  00000000  00001caa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3a       	cpi	r26, 0xA8	; 168
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fe 02 	call	0x5fc	; 0x5fc <main>
  8a:	0c 94 32 03 	jmp	0x664	; 0x664 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_10>:
TASK TASK_TABLE[MAX_TASKS];

int task_count = 0;

ISR(TIMER0_COMP_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
  a8:	ef 93       	push	r30
  aa:	ff 93       	push	r31
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	00 d0       	rcall	.+0      	; 0xb2 <__vector_10+0x20>
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < MAX_TASKS; i++)
  b6:	1a 82       	std	Y+2, r1	; 0x02
  b8:	19 82       	std	Y+1, r1	; 0x01
  ba:	b7 c0       	rjmp	.+366    	; 0x22a <__vector_10+0x198>
	{
		if (TASK_TABLE[i].taskPtr == PTR_VOID)
  bc:	29 81       	ldd	r18, Y+1	; 0x01
  be:	3a 81       	ldd	r19, Y+2	; 0x02
  c0:	c9 01       	movw	r24, r18
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	82 1b       	sub	r24, r18
  d0:	93 0b       	sbc	r25, r19
  d2:	8e 59       	subi	r24, 0x9E	; 158
  d4:	9f 4f       	sbci	r25, 0xFF	; 255
  d6:	fc 01       	movw	r30, r24
  d8:	80 81       	ld	r24, Z
  da:	91 81       	ldd	r25, Z+1	; 0x01
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	09 f4       	brne	.+2      	; 0xe2 <__vector_10+0x50>
  e0:	9c c0       	rjmp	.+312    	; 0x21a <__vector_10+0x188>
			continue;
		
		if (TASK_TABLE[i].toGo == 0)
  e2:	29 81       	ldd	r18, Y+1	; 0x01
  e4:	3a 81       	ldd	r19, Y+2	; 0x02
  e6:	c9 01       	movw	r24, r18
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	82 1b       	sub	r24, r18
  f6:	93 0b       	sbc	r25, r19
  f8:	8b 59       	subi	r24, 0x9B	; 155
  fa:	9f 4f       	sbci	r25, 0xFF	; 255
  fc:	fc 01       	movw	r30, r24
  fe:	80 81       	ld	r24, Z
 100:	91 81       	ldd	r25, Z+1	; 0x01
 102:	00 97       	sbiw	r24, 0x00	; 0
 104:	09 f0       	breq	.+2      	; 0x108 <__vector_10+0x76>
 106:	65 c0       	rjmp	.+202    	; 0x1d2 <__vector_10+0x140>
		{
			if (TASK_TABLE[i].interval == 0)
 108:	29 81       	ldd	r18, Y+1	; 0x01
 10a:	3a 81       	ldd	r19, Y+2	; 0x02
 10c:	c9 01       	movw	r24, r18
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	82 1b       	sub	r24, r18
 11c:	93 0b       	sbc	r25, r19
 11e:	89 59       	subi	r24, 0x99	; 153
 120:	9f 4f       	sbci	r25, 0xFF	; 255
 122:	fc 01       	movw	r30, r24
 124:	80 81       	ld	r24, Z
 126:	91 81       	ldd	r25, Z+1	; 0x01
 128:	00 97       	sbiw	r24, 0x00	; 0
 12a:	91 f4       	brne	.+36     	; 0x150 <__vector_10+0xbe>
				if (TASK_TABLE[i].ready > 0)
 12c:	29 81       	ldd	r18, Y+1	; 0x01
 12e:	3a 81       	ldd	r19, Y+2	; 0x02
 130:	c9 01       	movw	r24, r18
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	82 1b       	sub	r24, r18
 140:	93 0b       	sbc	r25, r19
 142:	8c 59       	subi	r24, 0x9C	; 156
 144:	9f 4f       	sbci	r25, 0xFF	; 255
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	88 23       	and	r24, r24
 14c:	09 f0       	breq	.+2      	; 0x150 <__vector_10+0xbe>
 14e:	67 c0       	rjmp	.+206    	; 0x21e <__vector_10+0x18c>
					continue;
			
			TASK_TABLE[i].toGo = TASK_TABLE[i].interval;
 150:	29 81       	ldd	r18, Y+1	; 0x01
 152:	3a 81       	ldd	r19, Y+2	; 0x02
 154:	c9 01       	movw	r24, r18
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	82 1b       	sub	r24, r18
 164:	93 0b       	sbc	r25, r19
 166:	89 59       	subi	r24, 0x99	; 153
 168:	9f 4f       	sbci	r25, 0xFF	; 255
 16a:	fc 01       	movw	r30, r24
 16c:	40 81       	ld	r20, Z
 16e:	51 81       	ldd	r21, Z+1	; 0x01
 170:	29 81       	ldd	r18, Y+1	; 0x01
 172:	3a 81       	ldd	r19, Y+2	; 0x02
 174:	c9 01       	movw	r24, r18
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	82 1b       	sub	r24, r18
 184:	93 0b       	sbc	r25, r19
 186:	8b 59       	subi	r24, 0x9B	; 155
 188:	9f 4f       	sbci	r25, 0xFF	; 255
 18a:	fc 01       	movw	r30, r24
 18c:	51 83       	std	Z+1, r21	; 0x01
 18e:	40 83       	st	Z, r20
			TASK_TABLE[i].ready++;
 190:	29 81       	ldd	r18, Y+1	; 0x01
 192:	3a 81       	ldd	r19, Y+2	; 0x02
 194:	c9 01       	movw	r24, r18
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	82 1b       	sub	r24, r18
 1a4:	93 0b       	sbc	r25, r19
 1a6:	8c 59       	subi	r24, 0x9C	; 156
 1a8:	9f 4f       	sbci	r25, 0xFF	; 255
 1aa:	fc 01       	movw	r30, r24
 1ac:	80 81       	ld	r24, Z
 1ae:	48 2f       	mov	r20, r24
 1b0:	4f 5f       	subi	r20, 0xFF	; 255
 1b2:	29 81       	ldd	r18, Y+1	; 0x01
 1b4:	3a 81       	ldd	r19, Y+2	; 0x02
 1b6:	c9 01       	movw	r24, r18
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	82 1b       	sub	r24, r18
 1c6:	93 0b       	sbc	r25, r19
 1c8:	8c 59       	subi	r24, 0x9C	; 156
 1ca:	9f 4f       	sbci	r25, 0xFF	; 255
 1cc:	fc 01       	movw	r30, r24
 1ce:	40 83       	st	Z, r20
 1d0:	27 c0       	rjmp	.+78     	; 0x220 <__vector_10+0x18e>
		}
		else
		{
			TASK_TABLE[i].toGo--;
 1d2:	29 81       	ldd	r18, Y+1	; 0x01
 1d4:	3a 81       	ldd	r19, Y+2	; 0x02
 1d6:	c9 01       	movw	r24, r18
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	82 1b       	sub	r24, r18
 1e6:	93 0b       	sbc	r25, r19
 1e8:	8b 59       	subi	r24, 0x9B	; 155
 1ea:	9f 4f       	sbci	r25, 0xFF	; 255
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	91 81       	ldd	r25, Z+1	; 0x01
 1f2:	ac 01       	movw	r20, r24
 1f4:	41 50       	subi	r20, 0x01	; 1
 1f6:	50 40       	sbci	r21, 0x00	; 0
 1f8:	29 81       	ldd	r18, Y+1	; 0x01
 1fa:	3a 81       	ldd	r19, Y+2	; 0x02
 1fc:	c9 01       	movw	r24, r18
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	82 1b       	sub	r24, r18
 20c:	93 0b       	sbc	r25, r19
 20e:	8b 59       	subi	r24, 0x9B	; 155
 210:	9f 4f       	sbci	r25, 0xFF	; 255
 212:	fc 01       	movw	r30, r24
 214:	51 83       	std	Z+1, r21	; 0x01
 216:	40 83       	st	Z, r20
 218:	03 c0       	rjmp	.+6      	; 0x220 <__vector_10+0x18e>
ISR(TIMER0_COMP_vect)
{
	for (int i = 0; i < MAX_TASKS; i++)
	{
		if (TASK_TABLE[i].taskPtr == PTR_VOID)
			continue;
 21a:	00 00       	nop
 21c:	01 c0       	rjmp	.+2      	; 0x220 <__vector_10+0x18e>
		
		if (TASK_TABLE[i].toGo == 0)
		{
			if (TASK_TABLE[i].interval == 0)
				if (TASK_TABLE[i].ready > 0)
					continue;
 21e:	00 00       	nop

int task_count = 0;

ISR(TIMER0_COMP_vect)
{
	for (int i = 0; i < MAX_TASKS; i++)
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	9a 81       	ldd	r25, Y+2	; 0x02
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	9a 83       	std	Y+2, r25	; 0x02
 228:	89 83       	std	Y+1, r24	; 0x01
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	9a 81       	ldd	r25, Y+2	; 0x02
 22e:	8a 30       	cpi	r24, 0x0A	; 10
 230:	91 05       	cpc	r25, r1
 232:	0c f4       	brge	.+2      	; 0x236 <__vector_10+0x1a4>
 234:	43 cf       	rjmp	.-378    	; 0xbc <__vector_10+0x2a>
		else
		{
			TASK_TABLE[i].toGo--;
		}
	}
}
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	5f 91       	pop	r21
 248:	4f 91       	pop	r20
 24a:	3f 91       	pop	r19
 24c:	2f 91       	pop	r18
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <structure>:

void structure()
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1 << OCIE0);
 260:	89 e5       	ldi	r24, 0x59	; 89
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	29 e5       	ldi	r18, 0x59	; 89
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	f9 01       	movw	r30, r18
 26a:	20 81       	ld	r18, Z
 26c:	22 60       	ori	r18, 0x02	; 2
 26e:	fc 01       	movw	r30, r24
 270:	20 83       	st	Z, r18
	TCCR0 |= (1 << CS01) | (1 << CS00);   //Clock parameter 64
 272:	83 e5       	ldi	r24, 0x53	; 83
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	23 e5       	ldi	r18, 0x53	; 83
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	f9 01       	movw	r30, r18
 27c:	20 81       	ld	r18, Z
 27e:	23 60       	ori	r18, 0x03	; 3
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
	TCCR0 |= (1 << WGM01); //CTC
 284:	83 e5       	ldi	r24, 0x53	; 83
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	23 e5       	ldi	r18, 0x53	; 83
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	f9 01       	movw	r30, r18
 28e:	20 81       	ld	r18, Z
 290:	28 60       	ori	r18, 0x08	; 8
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
	OCR0 = 250; //1 milisecond
 296:	8c e5       	ldi	r24, 0x5C	; 92
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	2a ef       	ldi	r18, 0xFA	; 250
 29c:	fc 01       	movw	r30, r24
 29e:	20 83       	st	Z, r18
	sei();
 2a0:	78 94       	sei
	
	task_count = 0;
 2a2:	10 92 61 00 	sts	0x0061, r1
 2a6:	10 92 60 00 	sts	0x0060, r1
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <structure+0x56>
		{
			task_count = task_count+1;
			if (task_count >= MAX_TASKS)
				task_count = 0;
		}
	}
 2ac:	00 00       	nop
	sei();
	
	task_count = 0;
	while (1)
	{
		if (TASK_TABLE[task_count].taskPtr == PTR_VOID)
 2ae:	20 91 60 00 	lds	r18, 0x0060
 2b2:	30 91 61 00 	lds	r19, 0x0061
 2b6:	c9 01       	movw	r24, r18
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	82 1b       	sub	r24, r18
 2c6:	93 0b       	sbc	r25, r19
 2c8:	8e 59       	subi	r24, 0x9E	; 158
 2ca:	9f 4f       	sbci	r25, 0xFF	; 255
 2cc:	fc 01       	movw	r30, r24
 2ce:	80 81       	ld	r24, Z
 2d0:	91 81       	ldd	r25, Z+1	; 0x01
 2d2:	00 97       	sbiw	r24, 0x00	; 0
 2d4:	a9 f4       	brne	.+42     	; 0x300 <structure+0xa8>
		{
			task_count = task_count+1;
 2d6:	80 91 60 00 	lds	r24, 0x0060
 2da:	90 91 61 00 	lds	r25, 0x0061
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	90 93 61 00 	sts	0x0061, r25
 2e4:	80 93 60 00 	sts	0x0060, r24
			if (task_count >= MAX_TASKS)
 2e8:	80 91 60 00 	lds	r24, 0x0060
 2ec:	90 91 61 00 	lds	r25, 0x0061
 2f0:	8a 30       	cpi	r24, 0x0A	; 10
 2f2:	91 05       	cpc	r25, r1
 2f4:	dc f2       	brlt	.-74     	; 0x2ac <structure+0x54>
				task_count = 0;
 2f6:	10 92 61 00 	sts	0x0061, r1
 2fa:	10 92 60 00 	sts	0x0060, r1
		{
			task_count = task_count+1;
			if (task_count >= MAX_TASKS)
				task_count = 0;
		}
	}
 2fe:	d6 cf       	rjmp	.-84     	; 0x2ac <structure+0x54>
		{
			task_count = task_count+1;
			if (task_count >= MAX_TASKS)
				task_count = 0;
		}
		else if (TASK_TABLE[task_count].ready > 0)
 300:	20 91 60 00 	lds	r18, 0x0060
 304:	30 91 61 00 	lds	r19, 0x0061
 308:	c9 01       	movw	r24, r18
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	82 1b       	sub	r24, r18
 318:	93 0b       	sbc	r25, r19
 31a:	8c 59       	subi	r24, 0x9C	; 156
 31c:	9f 4f       	sbci	r25, 0xFF	; 255
 31e:	fc 01       	movw	r30, r24
 320:	80 81       	ld	r24, Z
 322:	88 23       	and	r24, r24
 324:	09 f4       	brne	.+2      	; 0x328 <structure+0xd0>
 326:	57 c0       	rjmp	.+174    	; 0x3d6 <structure+0x17e>
		{
			TASK_TABLE[task_count].taskPtr();
 328:	20 91 60 00 	lds	r18, 0x0060
 32c:	30 91 61 00 	lds	r19, 0x0061
 330:	c9 01       	movw	r24, r18
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	82 1b       	sub	r24, r18
 340:	93 0b       	sbc	r25, r19
 342:	8e 59       	subi	r24, 0x9E	; 158
 344:	9f 4f       	sbci	r25, 0xFF	; 255
 346:	fc 01       	movw	r30, r24
 348:	80 81       	ld	r24, Z
 34a:	91 81       	ldd	r25, Z+1	; 0x01
 34c:	fc 01       	movw	r30, r24
 34e:	09 95       	icall
			TASK_TABLE[task_count].ready = TASK_TABLE[task_count].ready - 1;
 350:	20 91 60 00 	lds	r18, 0x0060
 354:	30 91 61 00 	lds	r19, 0x0061
 358:	40 91 60 00 	lds	r20, 0x0060
 35c:	50 91 61 00 	lds	r21, 0x0061
 360:	ca 01       	movw	r24, r20
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	84 1b       	sub	r24, r20
 370:	95 0b       	sbc	r25, r21
 372:	8c 59       	subi	r24, 0x9C	; 156
 374:	9f 4f       	sbci	r25, 0xFF	; 255
 376:	fc 01       	movw	r30, r24
 378:	80 81       	ld	r24, Z
 37a:	48 2f       	mov	r20, r24
 37c:	41 50       	subi	r20, 0x01	; 1
 37e:	c9 01       	movw	r24, r18
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	82 1b       	sub	r24, r18
 38e:	93 0b       	sbc	r25, r19
 390:	8c 59       	subi	r24, 0x9C	; 156
 392:	9f 4f       	sbci	r25, 0xFF	; 255
 394:	fc 01       	movw	r30, r24
 396:	40 83       	st	Z, r20
			
			if (TASK_TABLE[task_count].interval == 0)
 398:	20 91 60 00 	lds	r18, 0x0060
 39c:	30 91 61 00 	lds	r19, 0x0061
 3a0:	c9 01       	movw	r24, r18
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	82 1b       	sub	r24, r18
 3b0:	93 0b       	sbc	r25, r19
 3b2:	89 59       	subi	r24, 0x99	; 153
 3b4:	9f 4f       	sbci	r25, 0xFF	; 255
 3b6:	fc 01       	movw	r30, r24
 3b8:	80 81       	ld	r24, Z
 3ba:	91 81       	ldd	r25, Z+1	; 0x01
 3bc:	00 97       	sbiw	r24, 0x00	; 0
 3be:	31 f4       	brne	.+12     	; 0x3cc <structure+0x174>
				kernel_removeTask(task_count);
 3c0:	80 91 60 00 	lds	r24, 0x0060
 3c4:	90 91 61 00 	lds	r25, 0x0061
 3c8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <kernel_removeTask>
			
			task_count = 0;
 3cc:	10 92 61 00 	sts	0x0061, r1
 3d0:	10 92 60 00 	sts	0x0060, r1
		{
			task_count = task_count+1;
			if (task_count >= MAX_TASKS)
				task_count = 0;
		}
	}
 3d4:	6b cf       	rjmp	.-298    	; 0x2ac <structure+0x54>
			
			task_count = 0;
		}
		else
		{
			task_count = task_count+1;
 3d6:	80 91 60 00 	lds	r24, 0x0060
 3da:	90 91 61 00 	lds	r25, 0x0061
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	90 93 61 00 	sts	0x0061, r25
 3e4:	80 93 60 00 	sts	0x0060, r24
			if (task_count >= MAX_TASKS)
 3e8:	80 91 60 00 	lds	r24, 0x0060
 3ec:	90 91 61 00 	lds	r25, 0x0061
 3f0:	8a 30       	cpi	r24, 0x0A	; 10
 3f2:	91 05       	cpc	r25, r1
 3f4:	0c f4       	brge	.+2      	; 0x3f8 <structure+0x1a0>
 3f6:	5a cf       	rjmp	.-332    	; 0x2ac <structure+0x54>
				task_count = 0;
 3f8:	10 92 61 00 	sts	0x0061, r1
 3fc:	10 92 60 00 	sts	0x0060, r1
		}
	}
 400:	55 cf       	rjmp	.-342    	; 0x2ac <structure+0x54>

00000402 <kernel_addTask>:
}

void kernel_addTask(TASK_PTR _tP, uint16 _in, uint16 _pr)
{
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	00 d0       	rcall	.+0      	; 0x408 <kernel_addTask+0x6>
 408:	00 d0       	rcall	.+0      	; 0x40a <kernel_addTask+0x8>
 40a:	00 d0       	rcall	.+0      	; 0x40c <kernel_addTask+0xa>
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
 410:	9a 83       	std	Y+2, r25	; 0x02
 412:	89 83       	std	Y+1, r24	; 0x01
 414:	7c 83       	std	Y+4, r23	; 0x04
 416:	6b 83       	std	Y+3, r22	; 0x03
 418:	5e 83       	std	Y+6, r21	; 0x06
 41a:	4d 83       	std	Y+5, r20	; 0x05
	TASK_TABLE[_pr].taskPtr = _tP;
 41c:	2d 81       	ldd	r18, Y+5	; 0x05
 41e:	3e 81       	ldd	r19, Y+6	; 0x06
 420:	c9 01       	movw	r24, r18
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	82 1b       	sub	r24, r18
 430:	93 0b       	sbc	r25, r19
 432:	8e 59       	subi	r24, 0x9E	; 158
 434:	9f 4f       	sbci	r25, 0xFF	; 255
 436:	29 81       	ldd	r18, Y+1	; 0x01
 438:	3a 81       	ldd	r19, Y+2	; 0x02
 43a:	fc 01       	movw	r30, r24
 43c:	31 83       	std	Z+1, r19	; 0x01
 43e:	20 83       	st	Z, r18
	TASK_TABLE[_pr].ready = 0;
 440:	2d 81       	ldd	r18, Y+5	; 0x05
 442:	3e 81       	ldd	r19, Y+6	; 0x06
 444:	c9 01       	movw	r24, r18
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	82 1b       	sub	r24, r18
 454:	93 0b       	sbc	r25, r19
 456:	8c 59       	subi	r24, 0x9C	; 156
 458:	9f 4f       	sbci	r25, 0xFF	; 255
 45a:	fc 01       	movw	r30, r24
 45c:	10 82       	st	Z, r1
	TASK_TABLE[_pr].interval = _in;
 45e:	2d 81       	ldd	r18, Y+5	; 0x05
 460:	3e 81       	ldd	r19, Y+6	; 0x06
 462:	c9 01       	movw	r24, r18
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	82 1b       	sub	r24, r18
 472:	93 0b       	sbc	r25, r19
 474:	89 59       	subi	r24, 0x99	; 153
 476:	9f 4f       	sbci	r25, 0xFF	; 255
 478:	2b 81       	ldd	r18, Y+3	; 0x03
 47a:	3c 81       	ldd	r19, Y+4	; 0x04
 47c:	fc 01       	movw	r30, r24
 47e:	31 83       	std	Z+1, r19	; 0x01
 480:	20 83       	st	Z, r18
	TASK_TABLE[_pr].toGo = 0;
 482:	2d 81       	ldd	r18, Y+5	; 0x05
 484:	3e 81       	ldd	r19, Y+6	; 0x06
 486:	c9 01       	movw	r24, r18
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	82 1b       	sub	r24, r18
 496:	93 0b       	sbc	r25, r19
 498:	8b 59       	subi	r24, 0x9B	; 155
 49a:	9f 4f       	sbci	r25, 0xFF	; 255
 49c:	fc 01       	movw	r30, r24
 49e:	11 82       	std	Z+1, r1	; 0x01
 4a0:	10 82       	st	Z, r1
}
 4a2:	26 96       	adiw	r28, 0x06	; 6
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <kernel_removeTask>:

void kernel_removeTask(int i)
{
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	00 d0       	rcall	.+0      	; 0x4ba <kernel_removeTask+0x6>
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
 4be:	9a 83       	std	Y+2, r25	; 0x02
 4c0:	89 83       	std	Y+1, r24	; 0x01
	TASK_TABLE[i].taskPtr = PTR_VOID;
 4c2:	29 81       	ldd	r18, Y+1	; 0x01
 4c4:	3a 81       	ldd	r19, Y+2	; 0x02
 4c6:	c9 01       	movw	r24, r18
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	82 1b       	sub	r24, r18
 4d6:	93 0b       	sbc	r25, r19
 4d8:	8e 59       	subi	r24, 0x9E	; 158
 4da:	9f 4f       	sbci	r25, 0xFF	; 255
 4dc:	fc 01       	movw	r30, r24
 4de:	11 82       	std	Z+1, r1	; 0x01
 4e0:	10 82       	st	Z, r1
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	08 95       	ret

000004ec <temp1>:


#include <avr/io.h>

void temp1(void)
{
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62
	if (PORTA & 0x80)
 4f4:	8b e3       	ldi	r24, 0x3B	; 59
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	fc 01       	movw	r30, r24
 4fa:	80 81       	ld	r24, Z
 4fc:	88 23       	and	r24, r24
 4fe:	54 f4       	brge	.+20     	; 0x514 <temp1+0x28>
		PORTA &= 0x7f;
 500:	8b e3       	ldi	r24, 0x3B	; 59
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	2b e3       	ldi	r18, 0x3B	; 59
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	f9 01       	movw	r30, r18
 50a:	20 81       	ld	r18, Z
 50c:	2f 77       	andi	r18, 0x7F	; 127
 50e:	fc 01       	movw	r30, r24
 510:	20 83       	st	Z, r18
 512:	09 c0       	rjmp	.+18     	; 0x526 <temp1+0x3a>
	else
		PORTA |= 0x80;
 514:	8b e3       	ldi	r24, 0x3B	; 59
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	2b e3       	ldi	r18, 0x3B	; 59
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	f9 01       	movw	r30, r18
 51e:	20 81       	ld	r18, Z
 520:	20 68       	ori	r18, 0x80	; 128
 522:	fc 01       	movw	r30, r24
 524:	20 83       	st	Z, r18
}
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <temp2>:

void temp2(void)
{
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
	if (PORTA & 0x40)
 534:	8b e3       	ldi	r24, 0x3B	; 59
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	fc 01       	movw	r30, r24
 53a:	80 81       	ld	r24, Z
 53c:	88 2f       	mov	r24, r24
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	80 74       	andi	r24, 0x40	; 64
 542:	90 70       	andi	r25, 0x00	; 0
 544:	00 97       	sbiw	r24, 0x00	; 0
 546:	51 f0       	breq	.+20     	; 0x55c <temp2+0x30>
		PORTA &= 0xbf;
 548:	8b e3       	ldi	r24, 0x3B	; 59
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	2b e3       	ldi	r18, 0x3B	; 59
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	f9 01       	movw	r30, r18
 552:	20 81       	ld	r18, Z
 554:	2f 7b       	andi	r18, 0xBF	; 191
 556:	fc 01       	movw	r30, r24
 558:	20 83       	st	Z, r18
 55a:	09 c0       	rjmp	.+18     	; 0x56e <temp2+0x42>
	else
		PORTA |= 0x40;
 55c:	8b e3       	ldi	r24, 0x3B	; 59
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	2b e3       	ldi	r18, 0x3B	; 59
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	f9 01       	movw	r30, r18
 566:	20 81       	ld	r18, Z
 568:	20 64       	ori	r18, 0x40	; 64
 56a:	fc 01       	movw	r30, r24
 56c:	20 83       	st	Z, r18
}
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <temp3>:

void temp3(void)
{
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
	if (PORTA & 0x20)
 57c:	8b e3       	ldi	r24, 0x3B	; 59
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	fc 01       	movw	r30, r24
 582:	80 81       	ld	r24, Z
 584:	88 2f       	mov	r24, r24
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	80 72       	andi	r24, 0x20	; 32
 58a:	90 70       	andi	r25, 0x00	; 0
 58c:	00 97       	sbiw	r24, 0x00	; 0
 58e:	51 f0       	breq	.+20     	; 0x5a4 <temp3+0x30>
		PORTA &= 0xdf;
 590:	8b e3       	ldi	r24, 0x3B	; 59
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	2b e3       	ldi	r18, 0x3B	; 59
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	f9 01       	movw	r30, r18
 59a:	20 81       	ld	r18, Z
 59c:	2f 7d       	andi	r18, 0xDF	; 223
 59e:	fc 01       	movw	r30, r24
 5a0:	20 83       	st	Z, r18
 5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <temp3+0x42>
	else
		PORTA |= 0x20;
 5a4:	8b e3       	ldi	r24, 0x3B	; 59
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	2b e3       	ldi	r18, 0x3B	; 59
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	f9 01       	movw	r30, r18
 5ae:	20 81       	ld	r18, Z
 5b0:	20 62       	ori	r18, 0x20	; 32
 5b2:	fc 01       	movw	r30, r24
 5b4:	20 83       	st	Z, r18
}
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

000005bc <temp4>:

void temp4(void)
{
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
	if (PORTA & 0x80)
 5c4:	8b e3       	ldi	r24, 0x3B	; 59
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	fc 01       	movw	r30, r24
 5ca:	80 81       	ld	r24, Z
 5cc:	88 23       	and	r24, r24
 5ce:	54 f4       	brge	.+20     	; 0x5e4 <temp4+0x28>
		PORTA &= 0xef;
 5d0:	8b e3       	ldi	r24, 0x3B	; 59
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	2b e3       	ldi	r18, 0x3B	; 59
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	f9 01       	movw	r30, r18
 5da:	20 81       	ld	r18, Z
 5dc:	2f 7e       	andi	r18, 0xEF	; 239
 5de:	fc 01       	movw	r30, r24
 5e0:	20 83       	st	Z, r18
 5e2:	09 c0       	rjmp	.+18     	; 0x5f6 <temp4+0x3a>
	else
		PORTA |= 0x10;
 5e4:	8b e3       	ldi	r24, 0x3B	; 59
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	2b e3       	ldi	r18, 0x3B	; 59
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	f9 01       	movw	r30, r18
 5ee:	20 81       	ld	r18, Z
 5f0:	20 61       	ori	r18, 0x10	; 16
 5f2:	fc 01       	movw	r30, r24
 5f4:	20 83       	st	Z, r18
}
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	08 95       	ret

000005fc <main>:

int main(void)
{
 5fc:	cf 93       	push	r28
 5fe:	df 93       	push	r29
 600:	cd b7       	in	r28, 0x3d	; 61
 602:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xff;
 604:	8a e3       	ldi	r24, 0x3A	; 58
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	2f ef       	ldi	r18, 0xFF	; 255
 60a:	fc 01       	movw	r30, r24
 60c:	20 83       	st	Z, r18
	PORTA = 0x00;
 60e:	8b e3       	ldi	r24, 0x3B	; 59
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	fc 01       	movw	r30, r24
 614:	10 82       	st	Z, r1
	
	kernel_addTask(temp1, 5, 0);
 616:	86 e7       	ldi	r24, 0x76	; 118
 618:	92 e0       	ldi	r25, 0x02	; 2
 61a:	65 e0       	ldi	r22, 0x05	; 5
 61c:	70 e0       	ldi	r23, 0x00	; 0
 61e:	40 e0       	ldi	r20, 0x00	; 0
 620:	50 e0       	ldi	r21, 0x00	; 0
 622:	0e 94 01 02 	call	0x402	; 0x402 <kernel_addTask>
	kernel_addTask(temp2, 100, 1);
 626:	86 e9       	ldi	r24, 0x96	; 150
 628:	92 e0       	ldi	r25, 0x02	; 2
 62a:	64 e6       	ldi	r22, 0x64	; 100
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	41 e0       	ldi	r20, 0x01	; 1
 630:	50 e0       	ldi	r21, 0x00	; 0
 632:	0e 94 01 02 	call	0x402	; 0x402 <kernel_addTask>
	kernel_addTask(temp3, 250, 2);
 636:	8a eb       	ldi	r24, 0xBA	; 186
 638:	92 e0       	ldi	r25, 0x02	; 2
 63a:	6a ef       	ldi	r22, 0xFA	; 250
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	42 e0       	ldi	r20, 0x02	; 2
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	0e 94 01 02 	call	0x402	; 0x402 <kernel_addTask>
	kernel_addTask(temp4, 500, 3);
 646:	8e ed       	ldi	r24, 0xDE	; 222
 648:	92 e0       	ldi	r25, 0x02	; 2
 64a:	64 ef       	ldi	r22, 0xF4	; 244
 64c:	71 e0       	ldi	r23, 0x01	; 1
 64e:	43 e0       	ldi	r20, 0x03	; 3
 650:	50 e0       	ldi	r21, 0x00	; 0
 652:	0e 94 01 02 	call	0x402	; 0x402 <kernel_addTask>
	
	structure();
 656:	0e 94 2c 01 	call	0x258	; 0x258 <structure>
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	08 95       	ret

00000664 <_exit>:
 664:	f8 94       	cli

00000666 <__stop_program>:
 666:	ff cf       	rjmp	.-2      	; 0x666 <__stop_program>
