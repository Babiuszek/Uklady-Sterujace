
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000494  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000494  00000528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000528  2**0
                  ALLOC
  3 .stab         00001638  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000057e  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000020e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000474  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000162  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036e  00000000  00000000  00002736  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00002aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000141  00000000  00000000  00002b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018f  00000000  00000000  00002cb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  8a:	0c 94 48 02 	jmp	0x490	; 0x490 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
#define F_CPU 16000000UL

int przerwania;

ISR(TIMER0_OVF_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	przerwania++;
  a8:	80 91 60 00 	lds	r24, 0x0060
  ac:	90 91 61 00 	lds	r25, 0x0061
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	90 93 61 00 	sts	0x0061, r25
  b6:	80 93 60 00 	sts	0x0060, r24
}
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <SETUP_TIMEOUT>:

void SETUP_TIMEOUT(int us)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	00 d0       	rcall	.+0      	; 0xd2 <SETUP_TIMEOUT+0x6>
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	9a 83       	std	Y+2, r25	; 0x02
  d8:	89 83       	std	Y+1, r24	; 0x01
	
}
  da:	0f 90       	pop	r0
  dc:	0f 90       	pop	r0
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <SETUP_PWM>:

void SETUP_PWM()
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
	// Setup Timer0 (FCPU/64)
	TCCR0 = (1 << CS00) | (0 << CS01) | (0 << CS02);
  ec:	83 e5       	ldi	r24, 0x53	; 83
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
	// Setup Timer0 Mode to Fast PWM
	TCCR0 |= (1 << WGM00) | (1 << WGM01);
  f6:	83 e5       	ldi	r24, 0x53	; 83
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	23 e5       	ldi	r18, 0x53	; 83
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	f9 01       	movw	r30, r18
 100:	20 81       	ld	r18, Z
 102:	28 64       	ori	r18, 0x48	; 72
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
	// Enable Compare Interrupt and Overflow Interrupt
	TCCR0 |= (1 << COM00) | (1 << COM01);
 108:	83 e5       	ldi	r24, 0x53	; 83
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	23 e5       	ldi	r18, 0x53	; 83
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	f9 01       	movw	r30, r18
 112:	20 81       	ld	r18, Z
 114:	20 63       	ori	r18, 0x30	; 48
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
	
	sei();
 11a:	78 94       	sei
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <SET_PWM>:

void SET_PWM(unsigned char in)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	0f 92       	push	r0
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = in;
 12e:	8c e5       	ldi	r24, 0x5C	; 92
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	29 81       	ldd	r18, Y+1	; 0x01
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
}
 138:	0f 90       	pop	r0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <main>:

int main(void)
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	2e 97       	sbiw	r28, 0x0e	; 14
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	de bf       	out	0x3e, r29	; 62
 154:	0f be       	out	0x3f, r0	; 63
 156:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0x08;
 158:	87 e3       	ldi	r24, 0x37	; 55
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	28 e0       	ldi	r18, 0x08	; 8
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
	/*
	TCCR2 = (1 << CS00) | (0 << CS01) | (0 << CS02);
	TCCR2 |= (0 << WGM00) | (1 << WGM01); //CTC
	TCCR2 |= (1 << COM00) | (1 << COM01);
	*/
	SETUP_PWM();
 162:	0e 94 72 00 	call	0xe4	; 0xe4 <SETUP_PWM>
	
    while(1)
	{
		OCR0++;
 166:	8c e5       	ldi	r24, 0x5C	; 92
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	20 81       	ld	r18, Z
 16e:	2f 5f       	subi	r18, 0xFF	; 255
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	a0 ea       	ldi	r26, 0xA0	; 160
 17a:	b1 e4       	ldi	r27, 0x41	; 65
 17c:	89 83       	std	Y+1, r24	; 0x01
 17e:	9a 83       	std	Y+2, r25	; 0x02
 180:	ab 83       	std	Y+3, r26	; 0x03
 182:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 184:	69 81       	ldd	r22, Y+1	; 0x01
 186:	7a 81       	ldd	r23, Y+2	; 0x02
 188:	8b 81       	ldd	r24, Y+3	; 0x03
 18a:	9c 81       	ldd	r25, Y+4	; 0x04
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	4a e7       	ldi	r20, 0x7A	; 122
 192:	53 e4       	ldi	r21, 0x43	; 67
 194:	0e 94 bd 01 	call	0x37a	; 0x37a <__mulsf3>
 198:	dc 01       	movw	r26, r24
 19a:	cb 01       	movw	r24, r22
 19c:	8d 83       	std	Y+5, r24	; 0x05
 19e:	9e 83       	std	Y+6, r25	; 0x06
 1a0:	af 83       	std	Y+7, r26	; 0x07
 1a2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 1a4:	11 e0       	ldi	r17, 0x01	; 1
 1a6:	6d 81       	ldd	r22, Y+5	; 0x05
 1a8:	7e 81       	ldd	r23, Y+6	; 0x06
 1aa:	8f 81       	ldd	r24, Y+7	; 0x07
 1ac:	98 85       	ldd	r25, Y+8	; 0x08
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 e8       	ldi	r20, 0x80	; 128
 1b4:	5f e3       	ldi	r21, 0x3F	; 63
 1b6:	0e 94 3c 01 	call	0x278	; 0x278 <__cmpsf2>
 1ba:	88 23       	and	r24, r24
 1bc:	0c f0       	brlt	.+2      	; 0x1c0 <main+0x80>
 1be:	10 e0       	ldi	r17, 0x00	; 0
 1c0:	11 23       	and	r17, r17
 1c2:	29 f0       	breq	.+10     	; 0x1ce <main+0x8e>
		__ticks = 1;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	9a 87       	std	Y+10, r25	; 0x0a
 1ca:	89 87       	std	Y+9, r24	; 0x09
 1cc:	46 c0       	rjmp	.+140    	; 0x25a <main+0x11a>
	else if (__tmp > 65535)
 1ce:	11 e0       	ldi	r17, 0x01	; 1
 1d0:	6d 81       	ldd	r22, Y+5	; 0x05
 1d2:	7e 81       	ldd	r23, Y+6	; 0x06
 1d4:	8f 81       	ldd	r24, Y+7	; 0x07
 1d6:	98 85       	ldd	r25, Y+8	; 0x08
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	3f ef       	ldi	r19, 0xFF	; 255
 1dc:	4f e7       	ldi	r20, 0x7F	; 127
 1de:	57 e4       	ldi	r21, 0x47	; 71
 1e0:	0e 94 b9 01 	call	0x372	; 0x372 <__gesf2>
 1e4:	18 16       	cp	r1, r24
 1e6:	0c f0       	brlt	.+2      	; 0x1ea <main+0xaa>
 1e8:	10 e0       	ldi	r17, 0x00	; 0
 1ea:	11 23       	and	r17, r17
 1ec:	61 f1       	breq	.+88     	; 0x246 <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1ee:	69 81       	ldd	r22, Y+1	; 0x01
 1f0:	7a 81       	ldd	r23, Y+2	; 0x02
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	9c 81       	ldd	r25, Y+4	; 0x04
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	40 e2       	ldi	r20, 0x20	; 32
 1fc:	51 e4       	ldi	r21, 0x41	; 65
 1fe:	0e 94 bd 01 	call	0x37a	; 0x37a <__mulsf3>
 202:	dc 01       	movw	r26, r24
 204:	cb 01       	movw	r24, r22
 206:	bc 01       	movw	r22, r24
 208:	cd 01       	movw	r24, r26
 20a:	0e 94 40 01 	call	0x280	; 0x280 <__fixunssfsi>
 20e:	dc 01       	movw	r26, r24
 210:	cb 01       	movw	r24, r22
 212:	9a 87       	std	Y+10, r25	; 0x0a
 214:	89 87       	std	Y+9, r24	; 0x09
 216:	12 c0       	rjmp	.+36     	; 0x23c <main+0xfc>
 218:	89 e1       	ldi	r24, 0x19	; 25
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	9c 87       	std	Y+12, r25	; 0x0c
 21e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 220:	8b 85       	ldd	r24, Y+11	; 0x0b
 222:	9c 85       	ldd	r25, Y+12	; 0x0c
 224:	8c 01       	movw	r16, r24
 226:	c8 01       	movw	r24, r16
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0xe8>
 22c:	8c 01       	movw	r16, r24
 22e:	1c 87       	std	Y+12, r17	; 0x0c
 230:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 232:	89 85       	ldd	r24, Y+9	; 0x09
 234:	9a 85       	ldd	r25, Y+10	; 0x0a
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	9a 87       	std	Y+10, r25	; 0x0a
 23a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 23c:	89 85       	ldd	r24, Y+9	; 0x09
 23e:	9a 85       	ldd	r25, Y+10	; 0x0a
 240:	00 97       	sbiw	r24, 0x00	; 0
 242:	51 f7       	brne	.-44     	; 0x218 <main+0xd8>
 244:	18 c0       	rjmp	.+48     	; 0x276 <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 246:	6d 81       	ldd	r22, Y+5	; 0x05
 248:	7e 81       	ldd	r23, Y+6	; 0x06
 24a:	8f 81       	ldd	r24, Y+7	; 0x07
 24c:	98 85       	ldd	r25, Y+8	; 0x08
 24e:	0e 94 40 01 	call	0x280	; 0x280 <__fixunssfsi>
 252:	dc 01       	movw	r26, r24
 254:	cb 01       	movw	r24, r22
 256:	9a 87       	std	Y+10, r25	; 0x0a
 258:	89 87       	std	Y+9, r24	; 0x09
 25a:	89 85       	ldd	r24, Y+9	; 0x09
 25c:	9a 85       	ldd	r25, Y+10	; 0x0a
 25e:	9e 87       	std	Y+14, r25	; 0x0e
 260:	8d 87       	std	Y+13, r24	; 0x0d
 262:	8d 85       	ldd	r24, Y+13	; 0x0d
 264:	9e 85       	ldd	r25, Y+14	; 0x0e
 266:	8c 01       	movw	r16, r24
 268:	f8 01       	movw	r30, r16
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <main+0x12a>
 26e:	8f 01       	movw	r16, r30
 270:	1e 87       	std	Y+14, r17	; 0x0e
 272:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(20);
	}
 274:	78 cf       	rjmp	.-272    	; 0x166 <main+0x26>
 276:	77 cf       	rjmp	.-274    	; 0x166 <main+0x26>

00000278 <__cmpsf2>:
 278:	2f d0       	rcall	.+94     	; 0x2d8 <__fp_cmp>
 27a:	08 f4       	brcc	.+2      	; 0x27e <__cmpsf2+0x6>
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	08 95       	ret

00000280 <__fixunssfsi>:
 280:	57 d0       	rcall	.+174    	; 0x330 <__fp_splitA>
 282:	88 f0       	brcs	.+34     	; 0x2a6 <__fixunssfsi+0x26>
 284:	9f 57       	subi	r25, 0x7F	; 127
 286:	90 f0       	brcs	.+36     	; 0x2ac <__fixunssfsi+0x2c>
 288:	b9 2f       	mov	r27, r25
 28a:	99 27       	eor	r25, r25
 28c:	b7 51       	subi	r27, 0x17	; 23
 28e:	a0 f0       	brcs	.+40     	; 0x2b8 <__fixunssfsi+0x38>
 290:	d1 f0       	breq	.+52     	; 0x2c6 <__fixunssfsi+0x46>
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	88 1f       	adc	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	1a f0       	brmi	.+6      	; 0x2a2 <__fixunssfsi+0x22>
 29c:	ba 95       	dec	r27
 29e:	c9 f7       	brne	.-14     	; 0x292 <__fixunssfsi+0x12>
 2a0:	12 c0       	rjmp	.+36     	; 0x2c6 <__fixunssfsi+0x46>
 2a2:	b1 30       	cpi	r27, 0x01	; 1
 2a4:	81 f0       	breq	.+32     	; 0x2c6 <__fixunssfsi+0x46>
 2a6:	5e d0       	rcall	.+188    	; 0x364 <__fp_zero>
 2a8:	b1 e0       	ldi	r27, 0x01	; 1
 2aa:	08 95       	ret
 2ac:	5b c0       	rjmp	.+182    	; 0x364 <__fp_zero>
 2ae:	67 2f       	mov	r22, r23
 2b0:	78 2f       	mov	r23, r24
 2b2:	88 27       	eor	r24, r24
 2b4:	b8 5f       	subi	r27, 0xF8	; 248
 2b6:	39 f0       	breq	.+14     	; 0x2c6 <__fixunssfsi+0x46>
 2b8:	b9 3f       	cpi	r27, 0xF9	; 249
 2ba:	cc f3       	brlt	.-14     	; 0x2ae <__fixunssfsi+0x2e>
 2bc:	86 95       	lsr	r24
 2be:	77 95       	ror	r23
 2c0:	67 95       	ror	r22
 2c2:	b3 95       	inc	r27
 2c4:	d9 f7       	brne	.-10     	; 0x2bc <__fixunssfsi+0x3c>
 2c6:	3e f4       	brtc	.+14     	; 0x2d6 <__fixunssfsi+0x56>
 2c8:	90 95       	com	r25
 2ca:	80 95       	com	r24
 2cc:	70 95       	com	r23
 2ce:	61 95       	neg	r22
 2d0:	7f 4f       	sbci	r23, 0xFF	; 255
 2d2:	8f 4f       	sbci	r24, 0xFF	; 255
 2d4:	9f 4f       	sbci	r25, 0xFF	; 255
 2d6:	08 95       	ret

000002d8 <__fp_cmp>:
 2d8:	99 0f       	add	r25, r25
 2da:	00 08       	sbc	r0, r0
 2dc:	55 0f       	add	r21, r21
 2de:	aa 0b       	sbc	r26, r26
 2e0:	e0 e8       	ldi	r30, 0x80	; 128
 2e2:	fe ef       	ldi	r31, 0xFE	; 254
 2e4:	16 16       	cp	r1, r22
 2e6:	17 06       	cpc	r1, r23
 2e8:	e8 07       	cpc	r30, r24
 2ea:	f9 07       	cpc	r31, r25
 2ec:	c0 f0       	brcs	.+48     	; 0x31e <__fp_cmp+0x46>
 2ee:	12 16       	cp	r1, r18
 2f0:	13 06       	cpc	r1, r19
 2f2:	e4 07       	cpc	r30, r20
 2f4:	f5 07       	cpc	r31, r21
 2f6:	98 f0       	brcs	.+38     	; 0x31e <__fp_cmp+0x46>
 2f8:	62 1b       	sub	r22, r18
 2fa:	73 0b       	sbc	r23, r19
 2fc:	84 0b       	sbc	r24, r20
 2fe:	95 0b       	sbc	r25, r21
 300:	39 f4       	brne	.+14     	; 0x310 <__fp_cmp+0x38>
 302:	0a 26       	eor	r0, r26
 304:	61 f0       	breq	.+24     	; 0x31e <__fp_cmp+0x46>
 306:	23 2b       	or	r18, r19
 308:	24 2b       	or	r18, r20
 30a:	25 2b       	or	r18, r21
 30c:	21 f4       	brne	.+8      	; 0x316 <__fp_cmp+0x3e>
 30e:	08 95       	ret
 310:	0a 26       	eor	r0, r26
 312:	09 f4       	brne	.+2      	; 0x316 <__fp_cmp+0x3e>
 314:	a1 40       	sbci	r26, 0x01	; 1
 316:	a6 95       	lsr	r26
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	81 1d       	adc	r24, r1
 31c:	81 1d       	adc	r24, r1
 31e:	08 95       	ret

00000320 <__fp_split3>:
 320:	57 fd       	sbrc	r21, 7
 322:	90 58       	subi	r25, 0x80	; 128
 324:	44 0f       	add	r20, r20
 326:	55 1f       	adc	r21, r21
 328:	59 f0       	breq	.+22     	; 0x340 <__fp_splitA+0x10>
 32a:	5f 3f       	cpi	r21, 0xFF	; 255
 32c:	71 f0       	breq	.+28     	; 0x34a <__fp_splitA+0x1a>
 32e:	47 95       	ror	r20

00000330 <__fp_splitA>:
 330:	88 0f       	add	r24, r24
 332:	97 fb       	bst	r25, 7
 334:	99 1f       	adc	r25, r25
 336:	61 f0       	breq	.+24     	; 0x350 <__fp_splitA+0x20>
 338:	9f 3f       	cpi	r25, 0xFF	; 255
 33a:	79 f0       	breq	.+30     	; 0x35a <__fp_splitA+0x2a>
 33c:	87 95       	ror	r24
 33e:	08 95       	ret
 340:	12 16       	cp	r1, r18
 342:	13 06       	cpc	r1, r19
 344:	14 06       	cpc	r1, r20
 346:	55 1f       	adc	r21, r21
 348:	f2 cf       	rjmp	.-28     	; 0x32e <__fp_split3+0xe>
 34a:	46 95       	lsr	r20
 34c:	f1 df       	rcall	.-30     	; 0x330 <__fp_splitA>
 34e:	08 c0       	rjmp	.+16     	; 0x360 <__fp_splitA+0x30>
 350:	16 16       	cp	r1, r22
 352:	17 06       	cpc	r1, r23
 354:	18 06       	cpc	r1, r24
 356:	99 1f       	adc	r25, r25
 358:	f1 cf       	rjmp	.-30     	; 0x33c <__fp_splitA+0xc>
 35a:	86 95       	lsr	r24
 35c:	71 05       	cpc	r23, r1
 35e:	61 05       	cpc	r22, r1
 360:	08 94       	sec
 362:	08 95       	ret

00000364 <__fp_zero>:
 364:	e8 94       	clt

00000366 <__fp_szero>:
 366:	bb 27       	eor	r27, r27
 368:	66 27       	eor	r22, r22
 36a:	77 27       	eor	r23, r23
 36c:	cb 01       	movw	r24, r22
 36e:	97 f9       	bld	r25, 7
 370:	08 95       	ret

00000372 <__gesf2>:
 372:	b2 df       	rcall	.-156    	; 0x2d8 <__fp_cmp>
 374:	08 f4       	brcc	.+2      	; 0x378 <__gesf2+0x6>
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	08 95       	ret

0000037a <__mulsf3>:
 37a:	0b d0       	rcall	.+22     	; 0x392 <__mulsf3x>
 37c:	78 c0       	rjmp	.+240    	; 0x46e <__fp_round>
 37e:	69 d0       	rcall	.+210    	; 0x452 <__fp_pscA>
 380:	28 f0       	brcs	.+10     	; 0x38c <__mulsf3+0x12>
 382:	6e d0       	rcall	.+220    	; 0x460 <__fp_pscB>
 384:	18 f0       	brcs	.+6      	; 0x38c <__mulsf3+0x12>
 386:	95 23       	and	r25, r21
 388:	09 f0       	breq	.+2      	; 0x38c <__mulsf3+0x12>
 38a:	5a c0       	rjmp	.+180    	; 0x440 <__fp_inf>
 38c:	5f c0       	rjmp	.+190    	; 0x44c <__fp_nan>
 38e:	11 24       	eor	r1, r1
 390:	ea cf       	rjmp	.-44     	; 0x366 <__fp_szero>

00000392 <__mulsf3x>:
 392:	c6 df       	rcall	.-116    	; 0x320 <__fp_split3>
 394:	a0 f3       	brcs	.-24     	; 0x37e <__mulsf3+0x4>

00000396 <__mulsf3_pse>:
 396:	95 9f       	mul	r25, r21
 398:	d1 f3       	breq	.-12     	; 0x38e <__mulsf3+0x14>
 39a:	95 0f       	add	r25, r21
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	55 1f       	adc	r21, r21
 3a0:	62 9f       	mul	r22, r18
 3a2:	f0 01       	movw	r30, r0
 3a4:	72 9f       	mul	r23, r18
 3a6:	bb 27       	eor	r27, r27
 3a8:	f0 0d       	add	r31, r0
 3aa:	b1 1d       	adc	r27, r1
 3ac:	63 9f       	mul	r22, r19
 3ae:	aa 27       	eor	r26, r26
 3b0:	f0 0d       	add	r31, r0
 3b2:	b1 1d       	adc	r27, r1
 3b4:	aa 1f       	adc	r26, r26
 3b6:	64 9f       	mul	r22, r20
 3b8:	66 27       	eor	r22, r22
 3ba:	b0 0d       	add	r27, r0
 3bc:	a1 1d       	adc	r26, r1
 3be:	66 1f       	adc	r22, r22
 3c0:	82 9f       	mul	r24, r18
 3c2:	22 27       	eor	r18, r18
 3c4:	b0 0d       	add	r27, r0
 3c6:	a1 1d       	adc	r26, r1
 3c8:	62 1f       	adc	r22, r18
 3ca:	73 9f       	mul	r23, r19
 3cc:	b0 0d       	add	r27, r0
 3ce:	a1 1d       	adc	r26, r1
 3d0:	62 1f       	adc	r22, r18
 3d2:	83 9f       	mul	r24, r19
 3d4:	a0 0d       	add	r26, r0
 3d6:	61 1d       	adc	r22, r1
 3d8:	22 1f       	adc	r18, r18
 3da:	74 9f       	mul	r23, r20
 3dc:	33 27       	eor	r19, r19
 3de:	a0 0d       	add	r26, r0
 3e0:	61 1d       	adc	r22, r1
 3e2:	23 1f       	adc	r18, r19
 3e4:	84 9f       	mul	r24, r20
 3e6:	60 0d       	add	r22, r0
 3e8:	21 1d       	adc	r18, r1
 3ea:	82 2f       	mov	r24, r18
 3ec:	76 2f       	mov	r23, r22
 3ee:	6a 2f       	mov	r22, r26
 3f0:	11 24       	eor	r1, r1
 3f2:	9f 57       	subi	r25, 0x7F	; 127
 3f4:	50 40       	sbci	r21, 0x00	; 0
 3f6:	8a f0       	brmi	.+34     	; 0x41a <__mulsf3_pse+0x84>
 3f8:	e1 f0       	breq	.+56     	; 0x432 <__mulsf3_pse+0x9c>
 3fa:	88 23       	and	r24, r24
 3fc:	4a f0       	brmi	.+18     	; 0x410 <__mulsf3_pse+0x7a>
 3fe:	ee 0f       	add	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	bb 1f       	adc	r27, r27
 404:	66 1f       	adc	r22, r22
 406:	77 1f       	adc	r23, r23
 408:	88 1f       	adc	r24, r24
 40a:	91 50       	subi	r25, 0x01	; 1
 40c:	50 40       	sbci	r21, 0x00	; 0
 40e:	a9 f7       	brne	.-22     	; 0x3fa <__mulsf3_pse+0x64>
 410:	9e 3f       	cpi	r25, 0xFE	; 254
 412:	51 05       	cpc	r21, r1
 414:	70 f0       	brcs	.+28     	; 0x432 <__mulsf3_pse+0x9c>
 416:	14 c0       	rjmp	.+40     	; 0x440 <__fp_inf>
 418:	a6 cf       	rjmp	.-180    	; 0x366 <__fp_szero>
 41a:	5f 3f       	cpi	r21, 0xFF	; 255
 41c:	ec f3       	brlt	.-6      	; 0x418 <__mulsf3_pse+0x82>
 41e:	98 3e       	cpi	r25, 0xE8	; 232
 420:	dc f3       	brlt	.-10     	; 0x418 <__mulsf3_pse+0x82>
 422:	86 95       	lsr	r24
 424:	77 95       	ror	r23
 426:	67 95       	ror	r22
 428:	b7 95       	ror	r27
 42a:	f7 95       	ror	r31
 42c:	e7 95       	ror	r30
 42e:	9f 5f       	subi	r25, 0xFF	; 255
 430:	c1 f7       	brne	.-16     	; 0x422 <__mulsf3_pse+0x8c>
 432:	fe 2b       	or	r31, r30
 434:	88 0f       	add	r24, r24
 436:	91 1d       	adc	r25, r1
 438:	96 95       	lsr	r25
 43a:	87 95       	ror	r24
 43c:	97 f9       	bld	r25, 7
 43e:	08 95       	ret

00000440 <__fp_inf>:
 440:	97 f9       	bld	r25, 7
 442:	9f 67       	ori	r25, 0x7F	; 127
 444:	80 e8       	ldi	r24, 0x80	; 128
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	08 95       	ret

0000044c <__fp_nan>:
 44c:	9f ef       	ldi	r25, 0xFF	; 255
 44e:	80 ec       	ldi	r24, 0xC0	; 192
 450:	08 95       	ret

00000452 <__fp_pscA>:
 452:	00 24       	eor	r0, r0
 454:	0a 94       	dec	r0
 456:	16 16       	cp	r1, r22
 458:	17 06       	cpc	r1, r23
 45a:	18 06       	cpc	r1, r24
 45c:	09 06       	cpc	r0, r25
 45e:	08 95       	ret

00000460 <__fp_pscB>:
 460:	00 24       	eor	r0, r0
 462:	0a 94       	dec	r0
 464:	12 16       	cp	r1, r18
 466:	13 06       	cpc	r1, r19
 468:	14 06       	cpc	r1, r20
 46a:	05 06       	cpc	r0, r21
 46c:	08 95       	ret

0000046e <__fp_round>:
 46e:	09 2e       	mov	r0, r25
 470:	03 94       	inc	r0
 472:	00 0c       	add	r0, r0
 474:	11 f4       	brne	.+4      	; 0x47a <__fp_round+0xc>
 476:	88 23       	and	r24, r24
 478:	52 f0       	brmi	.+20     	; 0x48e <__fp_round+0x20>
 47a:	bb 0f       	add	r27, r27
 47c:	40 f4       	brcc	.+16     	; 0x48e <__fp_round+0x20>
 47e:	bf 2b       	or	r27, r31
 480:	11 f4       	brne	.+4      	; 0x486 <__fp_round+0x18>
 482:	60 ff       	sbrs	r22, 0
 484:	04 c0       	rjmp	.+8      	; 0x48e <__fp_round+0x20>
 486:	6f 5f       	subi	r22, 0xFF	; 255
 488:	7f 4f       	sbci	r23, 0xFF	; 255
 48a:	8f 4f       	sbci	r24, 0xFF	; 255
 48c:	9f 4f       	sbci	r25, 0xFF	; 255
 48e:	08 95       	ret

00000490 <_exit>:
 490:	f8 94       	cli

00000492 <__stop_program>:
 492:	ff cf       	rjmp	.-2      	; 0x492 <__stop_program>
